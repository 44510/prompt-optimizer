name: Release Desktop Apps

on:
  push:
    tags:
      - 'v*.*.*'        # 正式版本: v1.0.0, v2.1.3
      - 'v*.*.*-*'      # 预览版本: v1.0.0-beta.1, v1.0.0-rc.1

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '10.6.1'

jobs:
  # 构建 Windows 版本
  build-windows:
    runs-on: windows-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 安装依赖
        run: pnpm install

      - name: 构建 Desktop 应用
        run: pnpm build:desktop

      - name: 上传 Windows 构建产物
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: packages/desktop/dist/*.exe
          retention-days: 30

  # 构建 macOS 版本
  build-macos:
    runs-on: macos-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 安装依赖
        run: pnpm install

      - name: 构建 Desktop 应用
        run: pnpm build:desktop

      - name: 上传 macOS 构建产物
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: packages/desktop/dist/*.dmg
          retention-days: 30

  # 构建 Linux 版本
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 安装依赖
        run: pnpm install

      - name: 构建 Desktop 应用
        run: pnpm build:desktop

      - name: 上传 Linux 构建产物
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: packages/desktop/dist/*.AppImage
          retention-days: 30

  # 创建 GitHub Release
  create-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 获取版本号和类型
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

          # 判断是否为预览版本
          if [[ $VERSION == *"-"* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "This is a prerelease version"
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "This is a stable release"
          fi

      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: 显示构建产物
        run: |
          echo "构建产物列表:"
          find ./artifacts -type f -name "*" | sort

      - name: 生成 Release Notes
        id: release_notes
        run: |
          # 获取上一个tag
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -2 | tail -1)
          CURRENT_TAG=${{ steps.version.outputs.version }}

          echo "Previous tag: $PREVIOUS_TAG"
          echo "Current tag: $CURRENT_TAG"

          # 生成commit历史（处理多行和长commit）
          if [ -n "$PREVIOUS_TAG" ]; then
            COMMITS=$(git log --pretty=format:"%s|%h" $PREVIOUS_TAG..$CURRENT_TAG | while IFS='|' read -r subject hash; do
              # 截断过长的commit message（保留前80个字符）
              if [ ${#subject} -gt 80 ]; then
                subject="${subject:0:77}..."
              fi
              echo "- $subject (\`$hash\`)"
            done)
          else
            COMMITS=$(git log --pretty=format:"%s|%h" $CURRENT_TAG | while IFS='|' read -r subject hash; do
              # 截断过长的commit message（保留前80个字符）
              if [ ${#subject} -gt 80 ]; then
                subject="${subject:0:77}..."
              fi
              echo "- $subject (\`$hash\`)"
            done)
          fi

          # 检查是否有commits
          if [ -z "$COMMITS" ]; then
            COMMITS="- 首次发布"
          fi

          # 限制commits数量（最多显示20个）
          COMMITS_LIMITED=$(echo "$COMMITS" | head -20)
          COMMITS_COUNT=$(echo "$COMMITS" | wc -l)

          if [ $COMMITS_COUNT -gt 20 ]; then
            COMMITS_LIMITED="$COMMITS_LIMITED

          ... 以及其他 $((COMMITS_COUNT - 20)) 个提交"
          fi

          # 创建release notes
          cat > release_notes.md << EOF
          ## 🚀 Prompt Optimizer $CURRENT_TAG

          ### 📦 下载
          - **Windows**: \`Prompt Optimizer Setup *.exe\`
          - **macOS**: \`Prompt Optimizer-*.dmg\`
          - **Linux**: \`Prompt Optimizer-*.AppImage\`

          ### 🔧 安装说明
          - **Windows**: 下载 \`.exe\` 文件直接安装
          - **macOS**: 下载 \`.dmg\` 文件，拖拽到应用程序文件夹
          - **Linux**: 下载 \`.AppImage\` 文件，添加执行权限后直接运行

          ### 📝 更新内容
          $COMMITS_LIMITED

          ### 🔗 完整更新日志
          请查看 [CHANGELOG.md](./CHANGELOG.md) 了解详细更新内容。

          ---
          **提示**: 如果需要查看完整的提交历史，请访问 [GitHub Commits](https://github.com/\${{ github.repository }}/compare/$PREVIOUS_TAG...$CURRENT_TAG)
          EOF

          echo "Generated release notes:"
          cat release_notes.md

      - name: 创建 Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: ${{ steps.version.outputs.is_prerelease == 'true' && format('Preview {0}', steps.version.outputs.version) || format('Release {0}', steps.version.outputs.version) }}
          body_path: release_notes.md
          files: |
            ./artifacts/windows-build/*
            ./artifacts/macos-build/*
            ./artifacts/linux-build/*
          draft: false
          prerelease: ${{ steps.version.outputs.is_prerelease == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
